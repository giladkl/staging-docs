{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#overview","title":"Overview","text":"<p>Epsio plugs into existing databases and constantly updates results for queries you define whenever the underlying data changes, without ever re-calculating the entire dataset. This approach allows Epsio to provide instant and always up-to-date results for complex queries while also reducing costs.  </p> <p>Epsio supports most SQL syntax, including most types of <code>JOIN</code>s, <code>CTE</code>s, subqueries, <code>GROUP BY</code>, and more.</p>"},{"location":"#how-does-it-work","title":"How does it work?","text":"<p>As an example, imagine a database table that contains the salaries of all employees within a company, and a complex query that calculates the sum of salaries by department:</p> <p>As new data arrives or existing data is updated, the answer needs to change accordingly. While traditional databases need to rerun the entire query to do this, Epsio will only perform the minimum calculations needed - in this case, adding or subtracting the new salary from the relevant department:</p> <p>As the above calculation is very efficient (compared to recalculating the entire query), this results in massively reduced query times, significant cost savings, and a highly scalable architecture.</p>"},{"location":"#usage","title":"Usage","text":"<p>To configure Epsio to incrementally maintain the results of a heavy query, call the <code>create_view</code> function with the name and query parameters:  </p>Define the Epsio View<pre><code>postgres=# CALL epsio.create_view('epsio_view', 'SELECT SUM(SALARY), d.name FROM employee_salaries e\n      JOIN deplartments d on e.department_id = d.id\n      GROUP BY d.name');\nNOTICE:  View created successfully\nCALL\n</code></pre> <p>To retrieve the results, query the newly created Epsio view.</p> <p></p>Query Epsio View<pre><code>postgres=# SELECT * FROM epsio_view;\nsum     |    name     -------------+-------------\n76348540000 | Engineering\n14689640000 | Marketing\n64478860000 | Sales\n(3 rows)\nTime: 7.598 ms\n</code></pre> From this point onwards, Epsio will automatically update the view results whenever the underlying data changes to reflect the new results. <p></p>Data Changes<pre><code>postgres=# UPDATE departments SET name='Changed' WHERE name='Marketing';\nUPDATE 1\npostgres=# INSERT INTO employee_salaries (name, salary, department_id)\nVALUES ('John', 1337, 1);\nINSERT 0 1\n</code></pre> Query Epsio View<pre><code>postgres=# SELECT * FROM epsio_view;\nsum     |    name     -------------+-------------\n76348540000 | Engineering\n14689641337 | Changed\n64478860000 | Sales\n(3 rows)\nTime: 6.332 ms\n</code></pre>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#faq","title":"FAQ","text":"What kind of databases does Epsio work with? <p>Epsio\u2019s first version works with PostgreSQL. MySQL, SQL Server are in private alpha.</p> Can I use Epsio for managed cloud databases? <p>Yes, Epsio can be used with managed cloud database deployments such as Amazon RDS and Aurora, Google Cloud SQL, etc...</p> How does Epsio compare with caching solutions or materialized views? <p>Unlike caching solutions or materialized views, Epsio never recalculates the entire dataset. It only performs the minimum calculations needed to update the result, which leads to massively reduced query times, significant cost savings, and a highly scalable architecture.</p> <p>Epsio is suitable for complex queries containing <code>JOIN</code>, <code>GROUP BY</code>, subqueries, and more.</p> How does Epsio compare with pg_ivm? <p>Both Epsio and pg_ivm allow you to incrementally maintain materialized views in a PostgreSQL deployment. However, they have a few key differences:</p> Features pg_ivm Epsio Stability Not recommended for production deployments. Production Ready. Operator support Limited support, missing support for <code>OUTER</code> <code>JOIN</code>s, <code>ORDER BY</code>, and more. Supports most commonly used PostgreSQL operators. Supported PostgreSQL Workloads Can only be used in self-managed deployments of PostgreSQL (requires installation of a PostgreSQL extension). Supports both managed and self-managed deployments of PostgreSQL. Consistency Level Consistent, blocking writes until the MV update is complete. Eventual Consistent, never effecting write performance. How does Epsio compare with Materialize? <p>Epsio and Materialize both incrementally maintain results of SQL queries. However, they are designed with different primary use-cases and architectural considerations in mind.</p> Materialize Epsio Primary Use Case Replace Stream Processesors with SQL. Provide instant &amp; up to date results for heavy SQL queries. Query Methodology Requires to query Materialize to fetch query results. Writes back results to your PostgreSQL / uses FDWs, so there is no need to query another endpoint. Tradeoffs Higher \"freshness\" of data,Higher infrastructure costs. Lower \"freshness\" of data,Lower infrastructure costs. Deployment Method External to your cloud account, data needs to be forwarded to Materialize. Deployed within your account, no sensitive data leaves your environment. Operator support Supports most commonly used PostgreSQL operators. Supports most commonly used PostgreSQL operators. How does Epsio compare with Timescale's Continues Aggregates? <p>Both Epsio and Timescale's Continues Aggregates allow you to incrementally maintain materialized views in a PostgreSQL deployment. However, they have some key differences:</p> Continues Aggregates Epsio Syntax Support Supports only time-series data (supports only queries on Hypertables). Doesn't incrementally maintain <code>JOIN</code>s. Supports any PostgreSQL table and data, and all types of <code>JOIN</code>s. Deployment Requires the Timescale extension to be installed. Doesn't require any extension installed, can be used with a managed PostgreSQL instance How does Epsio compare with ReadySet? ReadySet Epsio Query Results Maintained \"Partially\" maintains query results based on usage/parameters (similar to a cache). As a result, the 99th percentile of response time may still remain very high. Constantly maintains the complete results of the defined queries, ensuring that query response times are always low. Deployment Acts as a proxy. If it crashes, it breaks the entire access to the production database. Sits \"behind\" the database, does not affect non-Epsio related database queries. Stability Not recommended for production deployments. Production ready. Is my data secure? <p>We take your data security very seriously.</p> <p>The Epsio engine can be deployed in your cloud account, in such a way that your sensitive data never leaves your cloud environment and is not accessible to Epsio cloud.</p> <p>Additionally, all communication between Epsio and the original database is encrypted and secured using industry-standard security practices.</p> Is Epsio open source? <p>No, Epsio is not open-source. However, we offer a free trial for interested users to test out our product before committing.</p>"},{"location":"about/data-privacy-and-security/","title":"Data Security","text":""},{"location":"about/data-privacy-and-security/#data-privacy-and-security","title":"Data Privacy and Security","text":"<p>At Epsio, we take data privacy very seriously. We understand that keeping sensitive data secure is crucial to building trust with our users. That's why we developed Epsio with an architecture that ensures Epsio Cloud does not have access to your sensitive data.</p>"},{"location":"about/data-privacy-and-security/#architecture","title":"Architecture","text":"<p>The architecture of an Epsio deployment is split into two separate planes. The control plane is the plane where Epsio manages the size of the deployment, gets usage statistics, and runs software updates. The data plane handles the actual data processing of database data.</p> <p> </p> Deployment Network Diagram"},{"location":"about/data-privacy-and-security/#how-is-the-control-plane-separated-from-the-data-plane","title":"How is the control plane separated from the data plane?","text":"<p>Epsio Cloud communicates with Epsio Deployments to manipulate resources, obtain usage statistics, and manage software upgrades. However, all data processing is done entirely on the compute instances deployed in the customer's environment, and Epsio Cloud cannot access the processed data.</p> <p>The separation of management and data processing ensures that Epsio provides the benefits of a managed service while maintaining the privacy and security of customer data.</p>"},{"location":"about/integrating-epsio/","title":"Architecture","text":""},{"location":"about/integrating-epsio/#integrating-epsio","title":"Integrating Epsio","text":"<p>We understand that integration is a critical aspect of bringing in any new technology, and so much more in the world of databases. To make the integration as seamless as possible, we have built Epsio in a way that it will only require to run a few SQL commands on your original database to onboard / integrate, and zero changes in the backend.</p> <p>Epsio works similarly to an extra \"read replica\" - it consumes changes from the database (WAL) as they occur, and continuously updates the results of specific queries.</p> <p>For each query the user wants Epsio to maintain, Epsio creates a \u201cvirtual table\u201d (utilizing foreign data wrappers in PostgreSQL) in the existing database which, when queried, will be forwarded to Epsio. To get the results, the application simply needs to query the original database, thereby staying agnostic to Epsio.</p> <p></p> <p>Our integration gives some key benefits:</p> <p>Fast Onboarding: Only a few commands need to be run in the original database to configure the CDC and virtual tables, and the backend does not need to be configured at all.</p> <p>Ease of Use: Epsio allows your backend code to query the same database using the same syntax, making it effortless to implement.</p> <p>Low Risk: Epsio avoids the risk of being a single point of failure by not acting as a proxy.</p>"},{"location":"about/key-concepts/","title":"Key concepts","text":""},{"location":"about/key-concepts/#incremental-materialized-views","title":"Incremental Materialized Views","text":"<p>Epsio's core technology is based on incremental materialized views. In traditional databases, materialized views are a way to store the result of a query as a table, which can then be queried more quickly in the future. However, these materialized views become stale as soon as the underlying data changes, requiring a full recalculation of the view. Incremental materialized views solve this problem by updating only the affected rows in the materialized view, rather than recalculating the entire view. This makes it possible to maintain fast query response times even as the underlying data changes, making Epsio a powerful tool for building high-performance applications.</p>"},{"location":"about/key-concepts/#foreign-data-wrappers","title":"Foreign Data Wrappers","text":"<p>Foreign Data Wrappers (FDWs) are a powerful feature of PostgreSQL that enable you to access and manipulate data stored in external systems as if it were in a local PostgreSQL table. This feature makes use of the SQL-MED (\"Management of External Data\") standard, which allows the creation of tables that act as proxies for data stored in other databases, files, or services.</p> <p>Epsio uses the FDW mechanism to seamlessly integrate with your existing PostgreSQL database. For every incremental view you create, a foreign table is also created in your database, the foreign table points to Epsio and allows you to query the same database and always get up-to-date results.</p>"},{"location":"about/key-concepts/#eventual-consistency","title":"Eventual Consistency","text":"<p>Eventual Consistency</p> <p>Eventual consistency is a consistency model used in distributed computing to achieve high availability that informally guarantees that, if no new updates are made to a given data item, eventually all accesses to that item will return the last updated value. Wikipedia</p> <p>When underlying data is changed in a query defined in Epsio, the change might not be immediately reflected in Epsio. However, the incremental update process ensures that Epsio will eventually be consistent with the data. This might result in brief periods (usually only a few milliseconds) where the view lags slightly behind the latest state of the data.</p>"},{"location":"examples/nyc-taxi/","title":"NYC Taxi Dataset","text":""},{"location":"examples/nyc-taxi/#nyc-taxi-dataset","title":"NYC Taxi Dataset","text":"<p>In this example, we will use the NYC Taxi dataset to demonstrate how to use Epsio to ....</p>"},{"location":"examples/nyc-taxi/#prerequisites","title":"Prerequisites","text":"<ul> <li>An empty PostgreSQL instance</li> <li>An Epsio instance connected to the PostgreSQL instance</li> </ul>"},{"location":"examples/nyc-taxi/#steps","title":"Steps","text":""},{"location":"examples/nyc-taxi/#1-simulate-workload","title":"1. Simulate Workload","text":"<p>In this Example, </p> <p>To simulate a \"live\" deployment, we will use a script that \"replays\" the NYC data . First, we download the script to simulate </p><pre><code>$ curl -O https://epsio.io/examples/nyc-taxi/simulate.py\n</code></pre> Then, run the script to simulate the data <pre><code>$ python simulate.py &lt;host&gt; &lt;username&gt; &lt;password&gt;\n</code></pre>"},{"location":"examples/nyc-taxi/#2-explore-the-dataset","title":"2. Explore the dataset","text":"<p>The NYC dataset contains 3 tables, <code>trips</code>, <code>rates</code> and <code>nyc_zones</code>. </p><pre><code>List of relations\nSchema |     Name      | Type  |  Owner\n--------+---------------+-------+----------\npublic | nyc_zones     | table | postgres\npublic | rates         | table | postgres\npublic | trips         | table | postgres\n(3 rows)\n</code></pre> <p>The <code>rides</code> table contains the actual rides data, and has the following schema: </p><pre><code>                             Table \"public.trips\"\nColumn         |            Type             | Collation | Nullable | Default -----------------------+-----------------------------+-----------+----------+---------\nid                    | integer                     |           |          | vendorid              | integer                     |           |          | tpep_pickup_datetime  | timestamp without time zone |           |          | tpep_dropoff_datetime | timestamp without time zone |           |          | passenger_count       | numeric(16,2)               |           |          | trip_distance         | numeric(16,2)               |           |          | ratecodeid            | numeric(16,2)               |           |          | store_and_fwd_flag    | character(1)                |           |          | pulocationid          | integer                     |           |          | dolocationid          | integer                     |           |          | payment_type          | integer                     |           |          | fare_amount           | numeric(16,2)               |           |          | extra                 | numeric(16,2)               |           |          | mta_tax               | numeric(16,2)               |           |          | tip_amount            | numeric(16,2)               |           |          | tolls_amount          | numeric(16,2)               |           |          | improvement_surcharge | numeric(16,2)               |           |          | total_amount          | numeric(16,2)               |           |          | congestion_surcharge  | numeric(16,2)               |           |          | airport_fee           | numeric(16,2)               |           |          | </code></pre> <p>Since our background script keeps inserting new data, the trips table contantly gets new data.</p> <p>Whenever you run the following query, the amount of rows will increase:</p> SELECT COUNT(*) FROM trips; Run &gt;          Results:"},{"location":"examples/nyc-taxi/#3-excelerate-queries-use-epsio-for-queries-what-would-be-a-good-title","title":"3. Excelerate Queries??? Use Epsio For queries??? What would be a good title?","text":"<p>Now that we have data in our database, we can start querying it.</p>"},{"location":"examples/nyc-taxi/#31-what-is-the-average-trip-distance","title":"3.1 What is the average trip distance?","text":"<p>To find out the average trip distance, we can run the following query:</p> SELECT AVG(trip_distance) FROM trips; Run &gt;          Results:          <p>Since this query takes long, let's create a view </p> <p></p> Using Epsio to maintain average trip length First, we create a view for the average trip distance: CALL epsio.create_view('avg_trip_distance', 'SELECT AVG(trip_distance) FROM trips'); Run &gt;          Results:           Then, to fetch the results of the view, we can run the following query (results are now super fast):  <code>SELECT * FROM avg_trip_distance; </code> Run &gt;          Results:"},{"location":"examples/nyc-taxi/#32-how-many-rides-of-each-rate-type-were-taken","title":"3.2 How many rides of each rate type were taken?","text":"<p>To find out how many rides of each rate type were taken, we can run the following query:</p> <code>SELECT rates.description, COUNT(*) AS num_trips FROM trips JOIN rates ON trips.ratecodeid = rates.rate_code GROUP BY rates.description ORDER BY LOWER(rates.description); </code> Run &gt;  Results:  <p></p> Using Epsio to maintain rides count per rate type  Create View  <code>CALL epsio.create_view('rides_per_rate', 'SELECT rates.description, COUNT(*) AS num_trips     FROM trips     JOIN rates ON trips.ratecodeid = rates.rate_code     GROUP BY rates.description'); </code> Run &gt;  Results:    Query The View (say again something about fast results now...)  <code>SELECT * FROM rides_per_rate ORDER BY LOWER(description); </code> Run &gt;  Results:"},{"location":"examples/nyc-taxi/#33-what-are-the-top-10-zones-where-the-most-taxi-rides-originate-from","title":"3.3 What are the top 10 zones where the most taxi rides originate from?","text":"<p>To find out the top 10 zones where the most taxi rides originate from, we can run the following query:</p> <code>SELECT nz.zone, COUNT(*) AS ride_count FROM trips AS t JOIN nyc_zones AS nz ON t.pulocationid = nz.locationid GROUP BY nz.zone ORDER BY ride_count DESC LIMIT 10; </code> Run &gt;  Results:  <p></p> Using Epsio to maintain rides count per rate type  Create View  <code>CALL epsio.create_view('top_10_zones', 'SELECT nz.zone, COUNT(*) AS ride_count     FROM trips AS t     JOIN nyc_zones AS nz ON t.pulocationid = nz.locationid     GROUP BY nz.zone     ORDER BY ride_count DESC LIMIT 10'); </code> Run &gt;  Results:    Query The View (say again something about fast results now...)  <code>SELECT * FROM top_10_zones ORDER BY ride_count DESC; </code> Run &gt;  Results:  <p></p>"},{"location":"getting-started/first-view/","title":"Define your first query","text":"<p>In order to define a query which will be handled by Epsio, just call <code>epsio.create_view</code> in your original database:</p> <pre><code>SELECT epsio.create_view('revenue_per_genre', 'SELECT movies.genre genre, sum(purchases.price) revenue \n     FROM purchases\n     LEFT JOIN movies on movies.id = purchases.movie_id \n     GROUP BY movies.genre');\n</code></pre> <p>From that point on, Epsio will maintain the results of that query, updating it incrementally as changes are made.</p>"},{"location":"getting-started/first-view/#query-views","title":"Query Views","text":"<p>In order to retrieve the results, just query your original database (which forwards the query to Epsio using the foreign data wrapper mechanism):</p> <pre><code>SELECT * FROM revenue_per_genre;\n</code></pre> <p>Since Epsio views function just like any other PostgreSQL view/table, you can also run more complex queries on top of the views you create:</p> <pre><code>SELECT genres.name, ROUND(revenue / 100) * 100\nFROM revenue_per_genre\nJOIN genres ON revenue_per_genre.genre=genres.id\nORDER BY revenue LIMIT 5\n</code></pre>"},{"location":"getting-started/sign-up/","title":"Sign up for a free trial","text":"<p>Info</p> <p>During the 30-day free trial, all usage of Epsio is free. However, Epsio utilizes compute and storage resources in your enviroment, which may result in additional costs in your cloud bill.</p>"},{"location":"getting-started/sign-up/#register-for-epsio","title":"Register for Epsio","text":"<p>To Register for Epsio, enter the following link and fill all the relevant details. </p> <p> </p>"},{"location":"getting-started/deployment/azure-private-beta/","title":"Azure private beta","text":"<p>EPSIO ALPHA AVAILABILITY</p> <p>At this time, Epsio on Azure is only available to alpha users. To get early access, contact us at support@epsio.io</p>"},{"location":"getting-started/deployment/gcp-private-beta/","title":"Gcp private beta","text":"<p>EPSIO ALPHA AVAILABILITY</p> <p>At this time, Epsio on GCP is only available to alpha users. To get early access, contact us at support@epsio.io</p>"},{"location":"getting-started/deployment/mysql-private-beta/","title":"MySQL","text":"<p>EPSIO ALPHA AVAILABILITY</p> <p>At this time, Epsio for MySQL is only available to alpha users. To get early access, contact us at support@epsio.io</p>"},{"location":"getting-started/deployment/oracle-private-beta/","title":"Oracle private beta","text":"<p>EPSIO ALPHA AVAILABILITY</p> <p>At this time, Epsio for Oracle is only available to alpha users. To get early access, contact us at support@epsio.io</p>"},{"location":"getting-started/deployment/sqlserver-private-beta/","title":"SQL Server","text":"<p>EPSIO ALPHA AVAILABILITY</p> <p>At this time, Epsio for SQL Server is only available to alpha users. To get early access, contact us at support@epsio.io</p>"},{"location":"getting-started/deployment/AWS/aws-role-permissions/","title":"AWS role permissions","text":""},{"location":"getting-started/deployment/AWS/aws-role-permissions/#aws-role-permissions","title":"AWS Role Permissions","text":"<p>This page provides a comprehensive overview of the AWS role permissions required to integrate your account with Epsio.</p> <p>Epsio's unique deployment model involves creating instances that reside in your cloud account, which Epsio manages.  This provides the benefits of a managed service while ensuring that sensitive data never leaves your environment and Epsio does not have access to your data.</p>"},{"location":"getting-started/deployment/AWS/aws-role-permissions/#permissions","title":"Permissions","text":"<p>When integrating with AWS, Epsio is granted permissions to create and manage its deployment in your account.  </p> <p>Epsio's role has the ability to create resources, such as EC2 instances and security groups, in the selected VPC and subnet, and to manage or edit only resources that were created by Epsio and have the Epsio tag (Owner=Epsio).</p> Role Permission Launch Limited to selected VPC &amp; Subnet <code>ec2:RunInstances</code> <code>ec2:CreateTags</code> <code>ec2:CreateSecurityGroup</code> Instance Management ** Limited to Epsio resources (where <code>Owner=Epsio</code>):**  <code>ec2:RebootInstances</code> <code>ec2:StopInstances</code> <code>ec2:TerminateInstances</code> <code>ec2:StartInstances</code> <code>ec2:AttachVolume</code> <code>ec2:DetachVolume</code> <code>ec2:AssociateIamInstanceProfile</code> <code>ec2:DisassociateIamInstanceProfile</code> <code>ec2:GetConsoleScreenshot</code> <code>ec2:ReplaceIamInstanceProfileAssociation</code> Security Group management ** Limited to Epsio resources (where <code>Owner=Epsio</code>):**  <code>ec2:AuthorizeSecurityGroupIngress</code> <code>ec2:RevokeSecurityGroupIngress</code> <code>ec2:AuthorizeSecurityGroupEgress</code> <code>ec2:RevokeSecurityGroupEgress</code> <code>ec2:ModifySecurityGroupRules</code> <code>ec2:UpdateSecurityGroupRuleDescriptionsIngress</code> <code>ec2:UpdateSecurityGroupRuleDescriptionsEgress</code> Monitoring <code>ec2:DescribeSubnets</code> <code>ec2:DescribeVolumes</code> <code>ec2:DescribeSecurityGroups</code> <code>ec2:DescribeInstances</code> <code>ec2:DescribeInstanceStatus</code> <code>ec2:DescribeVpcs</code> Termination ** Limited to Epsio resources (based on Epsio's resource names)**  <code>cloudformation:DeleteStack</code><code>iam:DeleteRole</code> <code>iam:DeleteRolePolicy</code> <code>iam:DeleteFunction</code> <code>lambda:InvokeFunction</code>"},{"location":"getting-started/deployment/AWS/deployment-guide-AWS/","title":"Deployment guide","text":"<p>This guide will walk you through the process of deploying Epsio for Epsio in your AWS environment.</p>"},{"location":"getting-started/deployment/AWS/deployment-guide-AWS/#before-you-begin","title":"Before you begin","text":"<p>Before proceeding with the deployment guide, ensure that you have the following:</p> <ul> <li>The VPC and subnet in your AWS account where you want to deploy Epsio in.       Make sure that the VPC has the required network access policy.</li> <li>A PostgreSQL Database with version 10+.</li> <li>An AWS user with the following permissions: <ul> <li>Create, launch, stop, and rollback CloudFormation stacks.</li> <li>Create and modify IAM users, roles, and policies.</li> </ul> </li> </ul>"},{"location":"getting-started/deployment/AWS/deployment-guide-AWS/#1-launch-epsio-in-your-cloud-environment","title":"1. Launch Epsio in your Cloud Environment","text":"<p>After you sign up to Epsio, a wizards will appear and walk you through the stages of deployment.</p> <p>You'll be required to choose the deployment size, medium is recommended for most deployments.  </p> <p>Epsio uses a Cloudformation stack to create and manage your Epsio deployment. To launch Epsio's cloudformation template, press \"Launch CloudFormation\" in the wizard.</p> <p></p> <p>You'll be requested to choose the VPC and Subnet in which you want to deploy Epsio.</p> <p></p> <p>To create the stack, scroll to the bottom of the page and select the checkbox labeled I acknowledge that AWS CloudFormation might create IAM resources with customer names.  </p> <p>After selecting this box, click on the Create stack button.</p> <p></p> <p>** Epsio will not have permissions for any resources that weren't created by us. ** Check AWS role permissions for a detailed description of the permissions given to the management role.</p> <p>The CloudFormation stack will now start running.  </p> <p>You can now go back to Epsio Cloud and track the progress of the deployment in the wizard.</p> <p></p> <p>Wait until Epsio is successfully deployed, and then proceed to the next step.</p>"},{"location":"getting-started/deployment/AWS/deployment-guide-AWS/#2-connect-epsio-to-your-database","title":"2. Connect Epsio to your database","text":"<p>After the creation of the CloudFormation stack, an Epsio instance will be deployed in your cloud environment. The next step will be to configure your database and connect it to Epsio.</p> <p>Open a connection to your database and follow the steps below.</p> <p> Create a schema for Epsio's metadata: </p><pre><code>CREATE SCHEMA epsio;\n</code></pre> <p> Create a database user for Epsio's exclusive use:     Replace secret with a strong password     </p><pre><code>CREATE USER epsio_user WITH PASSWORD 'secret';\n</code></pre> <p> Grant user permissions  Grant the <code>epsio_user</code> access to the <code>epsio</code> schema: </p><pre><code>GRANT USAGE ON SCHEMA epsio TO epsio_user;\nGRANT CREATE ON SCHEMA epsio TO epsio_user;\nGRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA epsio TO epsio_user;\n</code></pre>  Grant the <code>epsio_user</code> read-only access to all tables in your schema by running the following commands: <pre><code>GRANT USAGE ON SCHEMA my_schema TO epsio_user;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO epsio_user;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO epsio_user;\n</code></pre> <p>If you plan to access schemas other than the public schema, you'll need to run these commands for each schema. Replace <code>public</code> with the name of your schema.</p> <p> Enable the foreign data wrappers and dblink extensions on your database: </p><pre><code>CREATE EXTENSION IF NOT EXISTS postgres_fdw;\nCREATE EXTENSION IF NOT EXISTS dblink;\nGRANT USAGE ON FOREIGN DATA WRAPPER postgres_fdw TO epsio_user;\n</code></pre> <p> Create a publication that will be used to consume changes: </p><pre><code>CREATE PUBLICATION epsio_publication;\n</code></pre> <p> Enter the credentials of the epsio user you've just created in the wizard and click connect:     You will also need to provide the hostname (or IP address), port and database name.</p> <p></p> <p>After connection, Epsio will check that your database is configured correctly and will create the functions under the <code>epsio</code> schema. Continue to the next step to configure logical replication.</p>"},{"location":"getting-started/deployment/AWS/deployment-guide-AWS/#3-configure-logical-replication","title":"3. Configure logical replication","text":""},{"location":"getting-started/deployment/AWS/deployment-guide-AWS/#31-check-if-logical-replication-is-enabled","title":"3.1 Check if logical replication is enabled","text":"<p>Run the following command to check if your instance is already configured with logical replication:</p> AWS RDSAWS AuroraSelf Hosted <p></p><pre><code>postgres&gt; SHOW rds.logical_replication;\nrds.logical_replication -------------------------\noff\n(1 row)\n</code></pre> If the result is <code>on</code> (or 1), it means that logical replication is enabled, skip to set up replication. If not, follow the steps below to enable logical replication.  <p></p><pre><code>postgres&gt; SHOW rds.logical_replication;\nrds.logical_replication -------------------------\noff\n(1 row)\n</code></pre> If the result is <code>on</code> (or 1), it means that logical replication is enabled, skip to set up replication. If not, follow the steps below to enable logical replication.  <p></p><pre><code>postgres=&gt; SHOW wal_level;\nwal_level -----------\nreplica\n(1 row)\n</code></pre> If the result is  <code>logical</code>, it means that logical replication is enabled, skip to set up replication. If not, follow the steps below to enable logical replication."},{"location":"getting-started/deployment/AWS/deployment-guide-AWS/#32-enable-logical-replication","title":"3.2 Enable logical replication","text":"AWS RDSAWS AuroraSelf Hosted <p> Create a custom RDS parameter group. If your instance already uses a custom parameter group, skip to the next stage.</p> <p></p> <p> Edit the custom parameter group. set the <code>rds.logical_replication</code> parameter to 1.</p> <p></p> <p>Optional: Set the <code>max_slot_wal_keep_size</code> parameter to 4096 to limit the amount of WAL data that is retained for logical replication slots. (Postgres 13+)</p> <p> Associate the custom parameter group with your RDS instance. Go to the RDS management console, select your instance and click on the \"Modify\" button.</p> <p></p> <p>In the \"Modify DB Instance\" page, select the custom parameter group you created in the previous step.</p> <p></p> <p>Make sure you choose \"Apply Immediately\" to apply the changes immediately.</p> <p></p> <p> Wait for the parameter group configuration to change to \"Pending reboot\" status.</p> <p>The parameter group status can be found in the \"Configuration\" tab of your RDS instance.  </p> <p>Then, reboot the database for the changes to take effect.  </p> <p>You'll know that the changes have taken affect when the status of your DB instance Parameter Group changes to \"In Sync\".</p> <p></p> <p> Verify that the <code>rds.logical_replication</code> parameter is set to \"on\" (or 1). </p><pre><code>SHOW rds.logical_replication;\nrds.logical_replication\n-------------------------\non\n(1 row)\n</code></pre> <p> Create a custom Aurora parameter group. If your instance already uses a custom parameter group, skip to the next stage.</p> <p></p> <p> Edit the custom parameter group, set the <code>rds.logical_replication</code> parameter to 1.</p> <p></p> <p>Optional: Set the <code>max_slot_wal_keep_size</code> parameter to 4096 to limit the amount of WAL data that is retained for logical replication slots. (Postgres 13+)</p> <p> Associate the custom parameter group with your Aurora cluster. Go to the RDS management console, select your instance and click on the \"Modify\" button.</p> <p></p> <p>In the \"Modify DB Instance\" page, select the custom parameter group you created in the previous step.</p> <p></p> <p>Make sure you choose \"Apply Immediately\" to apply the changes immediately.</p> <p></p> <p> Wait for the parameter group configuration to change to \"Pending reboot\" status.</p> <p>The parameter group status can be found in the \"Configuration\" tab of your RDS instance.  </p> <p>Then, reboot the database for the changes to take effect.  </p> <p>You'll know that the changes have taken affect when the status of your DB instance Parameter Group changes to \"In Sync\".</p> <p></p> <p> Verify that the <code>rds.logical_replication</code> parameter is set to \"on\" (or 1). </p><pre><code>SHOW rds.logical_replication;\nrds.logical_replication\n-------------------------\non\n(1 row)\n</code></pre> <p> To enable logical replication in a PostgreSQL database, you need to set the <code>wal_level</code> parameter in your database configuration to logical. For standard PostgreSQL installations, you can do this by either:</p> <ul> <li>Method 1: Adding a <code>wal_level = logical</code> line to the <code>postgresql.conf</code> file.</li> <li>Method 2: Running <code>ALTER SYSTEM SET wal_level = logical;</code>;</li> </ul> <p>Optional: Set the <code>max_slot_wal_keep_size</code> parameter to 4096 to limit the amount of WAL data that is retained for logical replication slots. (Postgres 13+)</p> <p> Restart your database for the changes to take effect.  </p> <p> Verify that the <code>wal_level</code> parameter is set to \"logical\".     </p><pre><code>SHOW wal_level;\nwal_level\n-------------------------\nlogical\n(1 row)\n</code></pre>"},{"location":"getting-started/deployment/AWS/deployment-guide-AWS/#33-set-up-replication","title":"3.3 Set up replication","text":"<p>Next, you'll need to set up replication by running the following commands in your database:</p> AWS RDSAWS AuroraSelf Hosted <pre><code>CREATE PUBLICATION epsio_publication;\nGRANT rds_replication TO epsio_user;\n</code></pre> <pre><code>CREATE PUBLICATION epsio_publication;\nGRANT rds_replication TO epsio_user;\n</code></pre> <pre><code>CREATE PUBLICATION epsio_publication;\nALTER USER epsio_user WITH REPLICATION;\n</code></pre> <p>Once finished, click on the \"Validate Configuration\" and Epsio will verify that logical replication is set up correctly.</p> <p></p> <p>Congratulations! You've successfully enabled logical replication in your database.</p> <p>Once Epsio successfully connects to your database, you'll be redirected to the Epsio dashboard.</p> <p>You are set to go and can create your first view. Visit the create_view for further details.</p>"},{"location":"getting-started/deployment/AWS/networking/","title":"Networking","text":""},{"location":"getting-started/deployment/AWS/networking/#networking","title":"Networking","text":"<p>Deploying Epsio in your AWS account provides greater control over your network configurations, enabling you to comply with specific cloud security and governance standards that your organization may require.</p> <p> </p> Deployment Network Diagram"},{"location":"getting-started/deployment/AWS/networking/#network-acl-requirements","title":"Network ACL Requirements","text":"<p>When you deploy Epsio in your cloud account, a security group is automatically created to allow the required traffic for your Epsio deployment. However, it is possible that your VPC/Subnet ACLs may block the required traffic, which can cause your Epsio deployment to function properly.</p> <p>In order for your Epsio deployment to function properly, you must configure your network ACLs to allow the following:</p> <ul> <li>Ingress:<ul> <li>Allows incoming traffic from your database\u2019s IP and port (Postgres default port is 5432).</li> </ul> </li> <li>Egress:<ul> <li>Allow outgoing traffic to your database\u2019s IP and port (Postgres default port is 5432).</li> <li>Allow TCP access to 0.0.0.0/0 for these ports:<ul> <li>443: for Epsio infrastructure and management service.</li> </ul> </li> </ul> </li> </ul>"},{"location":"getting-started/deployment/AWS/networking/#troubleshooting","title":"Troubleshooting","text":"<p>If you are experiencing issues with your Epsio deployment, you can troubleshoot the issue by verifying the following:</p> <ol> <li>Verify Network ACLs: Network ACLs (Access Control Lists) are another layer of security in your VPC that control inbound and outbound traffic at the subnet level. Make sure your Network ACLs are not blocking the required traffic.</li> <li>Verify Internet Gateway (IGW) Association: To enable communication over the internet, a VPC must have an Internet Gateway (IGW) attached to it. Verify that your VPC is associated with an IGW.</li> <li>Check Security Group Rules: Your Epsio deployment is automatically configured with a security group that allows the required traffic. However, if you have modified the security group rules, make sure that the required traffic is allowed.</li> </ol>"},{"location":"getting-started/deployment/GCP/deployment-guide-GCP/","title":"Deployment guide","text":"<p>This guide will walk you through the process of deploying Epsio in your GCP environment.</p>"},{"location":"getting-started/deployment/GCP/deployment-guide-GCP/#before-you-begin","title":"Before you begin","text":"<p>Before proceeding with the deployment guide, ensure that you have the following:</p> <ul> <li>A VM instance to run epsio on with:<ul> <li>Network access to your PostgreSQL instance.</li> <li>Inbound rule allowing TCP traffic to port 5449.</li> <li><code>docker</code>, <code>docker compose</code> plugin and <code>zip</code> installed on it</li> </ul> </li> <li>A PostgreSQL Database with version 10+.</li> </ul>"},{"location":"getting-started/deployment/GCP/deployment-guide-GCP/#1-launch-epsio-in-your-vm","title":"1. Launch Epsio in your VM","text":"<p>After you sign up, a wizard will appear and walk you through the stages of deployment.</p> <p> Choose the architecture of your VM:</p> <p></p> <p> Run the displayed command in your VM:</p> <p></p> <p>Wait until Epsio is successfully deployed, and then proceed to the next step.</p>"},{"location":"getting-started/deployment/GCP/deployment-guide-GCP/#2-connect-epsio-to-your-database","title":"2. Connect Epsio to your database","text":"<p>The next step will be to configure your database and connect it to Epsio.</p> <p>Open a connection to your database and follow the steps below.</p> <p> Create a schema for Epsio's metadata: </p><pre><code>CREATE SCHEMA epsio;\n</code></pre> <p> Create a database user for Epsio's exclusive use:     Replace secret with a strong password     </p><pre><code>CREATE USER epsio_user WITH PASSWORD 'secret';\n</code></pre> <p> Grant user permissions  Grant the <code>epsio_user</code> access to the <code>epsio</code> schema: </p><pre><code>GRANT USAGE ON SCHEMA epsio TO epsio_user;\nGRANT CREATE ON SCHEMA epsio TO epsio_user;\nGRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA epsio TO epsio_user;\n</code></pre>  Grant the <code>epsio_user</code> read-only access to all tables in your schema by running the following commands: <pre><code>GRANT USAGE ON SCHEMA my_schema TO epsio_user;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO epsio_user;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO epsio_user;\n</code></pre> <p>If you plan to access schemas other than the public schema, you'll need to run these commands for each schema. Replace <code>public</code> with the name of your schema.</p> <p> Enable the foreign data wrappers and dblink extensions on your database: </p><pre><code>CREATE EXTENSION IF NOT EXISTS postgres_fdw;\nCREATE EXTENSION IF NOT EXISTS dblink;\nGRANT USAGE ON FOREIGN DATA WRAPPER postgres_fdw TO epsio_user;\n</code></pre> <p> Create a publication that will be used to consume changes: </p><pre><code>CREATE PUBLICATION epsio_publication;\n</code></pre> <p> Enter the Hostname / IP of the VM you deployed Epsio in:  </p> <p></p> <p> Enter the credentials of the epsio user you've just created in the wizard and click connect:     You will also need to provide the hostname (or IP address), port and database name.</p> <p></p> <p>After connection, Epsio will check that your database is configured correctly and will create the functions under the <code>epsio</code> schema. Continue to the next step to configure logical replication.</p>"},{"location":"getting-started/deployment/GCP/deployment-guide-GCP/#3-configure-logical-replication","title":"3. Configure logical replication","text":""},{"location":"getting-started/deployment/GCP/deployment-guide-GCP/#31-check-if-logical-replication-is-enabled","title":"3.1 Check if logical replication is enabled","text":"<p>Run the following command to check if your instance is already configured with logical replication:     </p><pre><code>postgres=&gt; SHOW wal_level;\nwal_level -----------\nreplica\n(1 row)\n</code></pre>     If the result is  <code>logical</code>, it means that logical replication is enabled, skip to set up replication.     If not, follow the steps below to enable logical replication."},{"location":"getting-started/deployment/GCP/deployment-guide-GCP/#32-enable-logical-replication","title":"3.2 Enable logical replication","text":"GCP Cloud SQLSelf Hosted <p> Edit your PostgreSQL server.</p> <p> Edit the Server's flags.</p> <p></p> <p> Turn on the <code>cloudsql.logical_decoding</code> flag.</p> <p></p> <p> Save the new configuration.</p> <p> Restart the server.</p> <p></p> <p> Verify that the <code>wal_level</code> parameter is set to \"logical\".     </p><pre><code>SHOW wal_level;\nwal_level\n-------------------------\nlogical\n(1 row)\n</code></pre> <p> To enable logical replication in a PostgreSQL database, you need to set the <code>wal_level</code> parameter in your database configuration to logical. For standard PostgreSQL installations, you can do this by either:</p> <ul> <li>Method 1: Adding a <code>wal_level = logical</code> line to the <code>postgresql.conf</code> file.</li> <li>Method 2: Running <code>ALTER SYSTEM SET wal_level = logical;</code>;</li> </ul> <p>Optional: Set the <code>max_slot_wal_keep_size</code> parameter to 4096 to limit the amount of WAL data that is retained for logical replication slots. (Postgres 13+)</p> <p> Restart your database for the changes to take effect.  </p> <p> Verify that the <code>wal_level</code> parameter is set to \"logical\".     </p><pre><code>SHOW wal_level;\nwal_level\n-------------------------\nlogical\n(1 row)\n</code></pre>"},{"location":"getting-started/deployment/GCP/deployment-guide-GCP/#33-set-up-replication","title":"3.3 Set up replication","text":"<p>Next, you'll need to set up replication by running the following commands in your database:     </p><pre><code>CREATE PUBLICATION epsio_publication;\nALTER USER epsio_user WITH REPLICATION;\n</code></pre> <p>Once finished, click on the \"Validate Configuration\" and Epsio will verify that logical replication is set up correctly.</p> <p></p> <p>Congratulations! You've successfully enabled logical replication in your database.</p> <p>Once Epsio successfully connects to your database, you'll be redirected to the Epsio dashboard.</p> <p>You are set to go and can create your first view. Visit the create_view for further details.</p>"},{"location":"reference/views-management/","title":"Views Management","text":""},{"location":"reference/views-management/create_view/","title":"create_view","text":""},{"location":"reference/views-management/create_view/#create_view","title":"create_view","text":"<p>The <code>create_view</code> command creates a new view that will be incrementally maintained by epsio. Much like Postgres' materialized views, the results of the given query will be pre-calculated and materialized into a table. However, with epsio - when the underlying data changes, epsio updates the query results accordingly.</p>"},{"location":"reference/views-management/create_view/#syntax","title":"Syntax","text":"<pre><code>CALL epsio.create_view(&lt;view_name&gt;, &lt;query&gt;);\n</code></pre> Parameter Information view_name A unique name for the view. query Full SQL query."},{"location":"reference/views-management/create_view/#details","title":"Details","text":"<p>After creating a new view, epsio processes the data that already exists in the relevant tables. This phase is known as the <code>population</code> phase and can take time depending on the size of your dataset. When the population is over, the view's status will be changed to <code>running</code> and the view will be ready to be queried and process changes in realtime.</p> <p>When creating a view on tables that you haven't created views on before, you'll need to add those tables to the publication that was created during deployment and set a replica identity for the table: <code>ALTER TABLE &lt;table_name&gt; REPLICA IDENTITY FULL;</code> <code>ALTER PUBLICATION epsio_publication ADD TABLE &lt;table_name&gt;;</code></p>"},{"location":"reference/views-management/create_view/#examples","title":"Examples","text":"<p>Creating a view:</p> <pre><code>CALL epsio.create_view('countries_population',\n'SELECT country.name, sum(city.population) AS total_population\n    FROM playground.country\n    JOIN playground.city ON country.code = city.country_code\n    group by country.name');\n</code></pre> <p>Querying from the newly created view:</p> <pre><code>SELECT * FROM countries_population;\n</code></pre>"},{"location":"reference/views-management/drop_view/","title":"drop_view","text":""},{"location":"reference/views-management/drop_view/#drop_view","title":"drop_view","text":"<p>The <code>drop_view</code> command stops the continuous maintenance of the epsio view and drops the foreign table.</p>"},{"location":"reference/views-management/drop_view/#syntax","title":"Syntax","text":"<pre><code>CALL epsio.drop_view(&lt;view_name&gt;);\n</code></pre> Parameter Information view_name The name of the view wished to be dropped."},{"location":"reference/views-management/drop_view/#examples","title":"Examples","text":"<p>Dropping a view:</p> <pre><code>CALL epsio.drop_view('countries_population');\n</code></pre>"},{"location":"reference/views-management/list_views/","title":"list_views","text":""},{"location":"reference/views-management/list_views/#list_views","title":"list_views","text":"<p>The <code>list_views</code> function returns information about all active epsio views in the system.</p>"},{"location":"reference/views-management/list_views/#syntax","title":"Syntax","text":"<pre><code>SELECT * FROM epsio.list_views(); </code></pre>"},{"location":"reference/views-management/list_views/#output","title":"Output","text":"Column Information view_name A unique name for the view. status The current status of the view. See #view-status for more details. message An optional message regarding the view. For example: an error message. query The full SQL query that was used to create the view. last_updated Datetime of the last status update."},{"location":"reference/views-management/list_views/#details","title":"Details","text":""},{"location":"reference/views-management/list_views/#view-status","title":"View Status","text":"<p>The status of a view could be one of the following:</p> Status Information Running The view has been created, and the initial population has been completed. It is now being constantly updated as data changes. Populating The view is currently processing the data that was resident in the tables before the view was created. Thus, it is not yet ready to be queried. Error An error has occurred while creating the view or while processing data. More information might be available in the <code>message</code> column."},{"location":"reference/views-management/list_views/#examples","title":"Examples","text":"<pre><code>SELECT view_name, query FROM epsio.list_views(); </code></pre> <pre><code>SELECT * FROM epsio.list_views() WHERE view_name = 'population_sum'; </code></pre>"},{"location":"reference/views-management/rename_view/","title":"rename_view","text":""},{"location":"reference/views-management/rename_view/#rename_view","title":"rename_view","text":"<p>The <code>rename_view</code> command allows you to change the name of an epsio view. After the change, the view can only be referenced with the new name.</p>"},{"location":"reference/views-management/rename_view/#syntax","title":"Syntax","text":"<pre><code>CALL epsio.rename_view(&lt;old_view_name&gt;, &lt;new_view_name&gt;);\n</code></pre> Parameter Information old_view_name The name of the view to be changed. new_view_name The new name for the view."},{"location":"reference/views-management/rename_view/#examples","title":"Examples","text":"<p>Renaming a view named <code>countries_population</code>:</p> <pre><code>CALL epsio.rename_view('countries_population', 'old_countries_population');\n</code></pre> <p>Renaming views in a transaction in order to perform a \"hot swap\":</p> <pre><code>begin;\nCALL epsio.drop_view('countries_population');\nCALL epsio.rename_view('new_countries_population_view', 'countries_population');\ncommit;\n</code></pre>"},{"location":"reference/views-management/indexes/create_index/","title":"create_index","text":""},{"location":"reference/views-management/indexes/create_index/#create_index","title":"create_index","text":"<p>The <code>create_index</code>  command creates a new index on a given view for the given columns. Currently, only B-tree indexes are supported.</p>"},{"location":"reference/views-management/indexes/create_index/#syntax","title":"Syntax","text":"<pre><code>CALL epsio.create_index(&lt;view_name&gt;, &lt;indexed_fields&gt;);\n</code></pre> Parameter Information view_name The name of the view indexed_fields A comma separated list of columns for which the index will be created."},{"location":"reference/views-management/indexes/create_index/#examples","title":"Examples","text":"<p>Creating an index on the view <code>countries_population</code> for the columns <code>country_name</code>:</p> <pre><code>CALL epsio.create_index('countries_population', 'country_name');\n</code></pre> <p>Creating an index on the view <code>countries_population</code> for the columns <code>id, population</code>:</p> <pre><code>CALL epsio.create_index('countries_population', 'id, population');\n</code></pre>"},{"location":"reference/views-management/indexes/drop_index/","title":"drop_index","text":""},{"location":"reference/views-management/indexes/drop_index/#drop_index","title":"drop_index","text":"<p>The <code>drop_index</code> command drops an existing index on a given view.</p>"},{"location":"reference/views-management/indexes/drop_index/#syntax","title":"Syntax","text":"<pre><code>CALL epsio.drop_index(&lt;view_name&gt;, &lt;indexed_fields&gt;);\n</code></pre> Parameter Information view_name The name of the view for which the index will dropped.. indexed_fields A comma separated list of the index's columns."},{"location":"reference/views-management/indexes/drop_index/#examples","title":"Examples","text":"<p>Dropping the index on the view <code>countries_population</code> for the columns <code>country_name</code>:</p> <pre><code>CALL epsio.drop_index('countries_population', 'country_name');\n</code></pre> <p>Dropping the index on the view <code>countries_population</code> for the columns <code>id, population</code>:</p> <pre><code>CALL epsio.drop_index('countries_population', 'id, population');\n</code></pre>"},{"location":"reference/views-management/indexes/list_indexes/","title":"list_indexes","text":""},{"location":"reference/views-management/indexes/list_indexes/#list_indexes","title":"list_indexes","text":"<p>The <code>list_indexes</code> function returns information about all active epsio views in the system.</p>"},{"location":"reference/views-management/indexes/list_indexes/#syntax","title":"Syntax","text":"<pre><code>SELECT * FROM epsio.list_indexes(&lt;view_name&gt;); </code></pre> Parameter Information view_name The name of the view."},{"location":"reference/views-management/indexes/list_indexes/#output","title":"Output","text":"Column Information indexed_columns The columns that make each index."},{"location":"reference/views-management/indexes/list_indexes/#examples","title":"Examples","text":"<p>Querying the indexes of the view <code>countries_population</code>:</p> <pre><code>SELECT * FROM epsio.list_indexes('countries_population'); </code></pre>"},{"location":"sql-support/","title":"SQL Support","text":""},{"location":"sql-support/built-in-functions/","title":"Built-in functions","text":""},{"location":"sql-support/built-in-functions/#built-in-functions","title":"Built-in functions","text":"Category Description Examples String Functions Functions for manipulating and processing text <code>length()</code>, <code>concat()</code>, <code>substring()</code>, <code>trim()</code>, <code>replace()</code>, <code>lower()</code> Numeric Functions Functions for performing calculations on numbers <code>abs()</code>, <code>ceil()</code>, <code>floor()</code>, <code>round()</code>, <code>sqrt()</code> Date and Time Functions Functions for manipulating and processing dates and times <code>age()</code> , <code>extract()</code> Aggregate Functions Functions for aggregating and summarizing data <code>count()</code>, <code>sum()</code>, <code>avg()</code>, <code>min()</code>, <code>max()</code> JSON Functions Functions for manipulating JSON data <code>to_jsonb()</code>, <code>-&gt;</code>, <code>json_object()</code> Conditional functions Functions for controlling the flow of execution based on conditions <code>coalesce()</code>, <code>greatest()</code>, <code>nullif()</code>"},{"location":"sql-support/expressions-and-operators/","title":"Expressions and operators","text":""},{"location":"sql-support/expressions-and-operators/#expressions-and-operators","title":"Expressions and operators","text":""},{"location":"sql-support/expressions-and-operators/#basic-operators","title":"Basic operators","text":""},{"location":"sql-support/expressions-and-operators/#mathematical-operators","title":"Mathematical operators","text":"OPERATOR DESCRIPTION EXAMPLE + Addition 1 + 2 results in 3 - Subtraction 1 - 2 results in -1 * Multiplication 2 * 2 results in 4 / Division 6 / 2 results in 3 % Remainder 5 % 4 results in 1 ^ Exponent (association of left to right) 2.0 ^ 3.0 results in 8"},{"location":"sql-support/expressions-and-operators/#comparison-operators","title":"Comparison operators","text":"OPERATOR DESCRIPTION EXAMPLE &lt; Less than a &lt; 5 &gt; Greater than a &gt; 5 &lt;= Less than or equal to a &lt;= 5 &gt;= Greater than or equal to a &gt;= 5 = Equal a = 5 &lt;&gt; Not equal a &lt;&gt; 5 != Not equal a != 5"},{"location":"sql-support/expressions-and-operators/#logical-operators","title":"Logical operators","text":"OPERATOR DESCRIPTION AND Allows the existence of multiple conditions in a <code>WHERE</code> clause. NOT Negates the meaning of another operator. For example, <code>NOT IN</code>, <code>NOT BETWEEN</code>. OR Combines multiple conditions in a <code>WHERE</code> clause."},{"location":"sql-support/expressions-and-operators/#conditional-expressions-and-operators","title":"Conditional expressions and operators","text":"Expression Description CASE A conditional statement that allows you to perform conditional logic in queries, returning different values based on specific conditions being met. CAST convert a value of one data type to another"},{"location":"sql-support/queries/","title":"Queries","text":""},{"location":"sql-support/queries/#queries","title":"Queries","text":"Component Supported <code>FROM</code> <code>WHERE</code> <code>GROUP BY</code> <code>DISTINCT</code> <code>ORDER BY</code> <code>JOIN</code>s (INNER/OUTER, LEFT/RIGHT) <code>UNION</code>, <code>INTERSECT</code>,  <code>EXCEPT</code> Subqueries User-defined functions CTEs CTEs with recursive Window functions"},{"location":"sql-support/types/","title":"Types","text":""},{"location":"sql-support/types/#types","title":"Types","text":"Type Supported Category INTEGER Numeric \u200bSMALLINT\u200b Numeric \u200bBIGINT\u200b Numeric \u200bDECIMAL\u200b Numeric \u200bNUMERIC\u200b Numeric \u200bDOUBLE PRECISION Numeric \u200bREAL\u200b Numeric \u200bSERIAL\u200b Numeric \u200bSMALLSERIAL\u200b Numeric \u200bBIGSERIAL\u200b Numeric \u200bCHAR\u200b Character \u200bVARCHAR\u200b Character \u200bTEXT\u200b Character \u200bBYTEA\u200b Date/Time \u200bDATE\u200b Date/Time \u200bTIME\u200b Date/Time \u200bTIMETZ\u200b Date/Time \u200bTIMESTAMP\u200b Date/Time \u200bTIMESTAMP WITH TIME ZONE\u200b Date/Time \u200bINTERVAL\u200b Date/Time \u200bBOOLEAN\u200b Boolean \u200bJSON\u200b JSON \u200bJSONB\u200b JSON ARRAY ARRAY"}]}